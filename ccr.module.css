:root {
  --ccr-size: 1em;
  --ccr-color-outer: black;
  --ccr-color-outer-checked: var(--ccr-color-outer);
  --ccr-color-inner: black;
  --ccr-background: #fff;
  --ccr-background-checked: var(--ccr-background);
  --ccr-border-width: 1px;
  --ccr-border-width-focus: 2px;
  --ccr-border-radius-checkbox: 2px;
  --ccr-icon-scale-checkbox: 70%;
  --ccr-icon-scale-radio: 45%;
  --ccr-offset-y: -15%;
  --ccr-line-height: 1.1;
}
.ccr *,
.ccr ::before,
.ccr ::after {
  box-sizing: border-box;
}
.ccr {
  position: relative;
}
.ccr input {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
.ccr input ~ label {
  position: relative;
  display: flex;
  line-height: var(--ccr-line-height);
  cursor: pointer;
  user-select: none;
}
.ccr input ~ label::before,
.ccr input ~ label::after {
  content: "";
  width: var(--ccr-size);
  height: var(--ccr-size);
  /* box-shadow doesn't mess with the position of the background-image, unlike border */
}
.ccr input ~ label::before {
  margin-right: 0.5em;
  background-color: var(--ccr-background);
  box-shadow: 0 0 0 var(--ccr-border-width) var(--ccr-color-outer);
  background-position: center;
  background-repeat: no-repeat;
  flex-shrink: 0;
  transform: translateY(var(--ccr-offset-y));
}
.ccr input ~ label::after {
  position: absolute;
  top: 0;
  left: 0;
}
/* Nested inline elements won't render their whitespace,
 what with it being flexed as a henchman so work around it: */
/* Update maybe they do now, at least in newer context */
/* .ccr input ~ label a {
  margin-right: 0.3em;
  margin-left: 0.3em;
}
.ccr input ~ label a + a {
  margin-left: 0;
} */
.ccr input:focus ~ label::before {
  box-shadow: 0 0 0 var(--ccr-border-width-focus) var(--ccr-color-outer);
}
.ccr input:checked ~ label::before {
  background-color: var(--ccr-background-checked);
  box-shadow: 0 0 0 var(--ccr-border-width) var(--ccr-color-outer-checked);
}
/* Checkbox specific */
.ccr input[type="checkbox"] ~ label::before {
  border-radius: var(--ccr-border-radius-checkbox);
}
.ccr input[type="checkbox"]:checked ~ label::after {
  background-color: var(--ccr-color-inner);
  /* Using masks instead, on a separate pseudo element, so we can use a var currentColor without compilation.
  mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z' fill='currentColor' /%3E%3C/svg%3E")
    no-repeat center / contain;
  mask-size: var(--ccr-icon-scale-checkbox) var(--ccr-icon-scale-checkbox);
}
/* Radio specific */
.ccr input[type="radio"] ~ label::before {
  border-radius: 50%;
}
.ccr input[type="radio"]:checked ~ label::after {
  background-color: var(--ccr-color-inner);
  mask: url("data:image/svg+xml, '%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Ccircle cx='12' cy='12' r='12' fill='currentColor'/%3E%3C/svg%3E'%0A");
  mask-size: var(--ccr-icon-scale-radio) var(--ccr-icon-scale-radio);
}
